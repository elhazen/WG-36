wordcloud2(dft, size = 2, minRotation = -pi/6, maxRotation = -pi/6,
rotateRatio = 1)
colorVec = rep(c('red', 'skyblue'), length.out=nrow(dft))
wordcloud2(dft, color = colorVec, fontWeight = "bold")
wordcloud2(dft,
color = ifelse(dft[, 2] > 20, 'red', 'skyblue'))
dft
rep_terms <- c(100, 25, 10, 5, 2, 125, 20, 10, 50, 30, 20, 175, 120, 20)
dft <- tibble(terms = terms, rep = rep_terms)
dft$terms_repeated <- vector("list", length = length(terms))
wordcloud2(dft)
rep_terms <- c(100, 25, 10, 5, 2, 125, 20, 10, 50, 30, 20, 125, 120, 20)
dft <- tibble(terms = terms, rep = rep_terms)
dft$terms_repeated <- vector("list", length = length(terms))
wordcloud2(dft)
library(wordcloud)
?wordcloud
wordcloud(terms,rep_terms,scale=c(4,.5),min.freq=3,max.words=Inf,
random.order=TRUE, random.color=FALSE, rot.per=.1,
colors="black",ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE, ...)
wordcloud(terms,rep_terms,scale=c(4,.5),min.freq=3,max.words=Inf,
random.order=TRUE, random.color=FALSE, rot.per=.1,
colors="black",ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
wordcloud(terms,rep_terms)
rep_terms <- c(100, 25, 10, 5, 2, 125, 20, 10, 50, 30, 20, 175, 80, 20)
dft <- tibble(terms = terms, rep = rep_terms)
dft$terms_repeated <- vector("list", length = length(terms))
dft <- tibble(terms = terms, rep = rep_terms)
wordcloud2(dft)
wordcloud(terms,rep_terms)
wordcloud(terms,rep_terms, random.color=TRUE)
wordcloud2(dft, scale=c(4,.5),min.freq=3,max.words=Inf)
wordcloud2
pal <-brewer.pal(8,"Dark2")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
pal <-brewer.pal(8,"Dark1")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
?brewer.pal
pal <-brewer.pal(8,"Set1")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
pal <-brewer.pal(8,"Set2")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
pal <-brewer.pal(8,"Set3")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
pal <-brewer.pal(8,"Dark2")
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
wordcloud(terms,rep_terms, scale=c(8,.2),min.freq=2,
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal)
wordcloud(terms,rep_terms, scale=c(8,.2),min.freq=2,
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal)
wordcloud2(dft)
wordcloud(terms,rep_terms, scale=c(8,.2),min.freq=2,
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal)
wordcloud(terms,rep_terms, random.color=TRUE, colors = pal)
wordcloud(terms,rep_terms, min.freq=2,
max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal)
install.packages(c("ade4TkGUI", "clusterSEs", "curl", "DT", "feather", "knitr", "lambda.r", "loa", "mirt", "nycflights13", "pinp", "pkgdown", "recipes", "rscopus", "rstantools", "sf", "sjlabelled", "spam", "spam64", "spdep", "tinytex", "tmap", "xaringan"))
install.packages("venneuler")
library(venneuler)
install.packages("rJava")
library(venneuler)
library(rJava)
blogdown::new_site(theme = "devcows/hugo-universal-theme")
?blogdown::new_site
library(INDperform)
?model_trend
?plot_trend
?ind_init
?model_gam
?select_interaction
?test_interactino
?test_interaction
glimpse(all_results_ex)
tidyverse::glimpse(all_results_ex)
library(tidyverse
)
tidyverse::glimpse(all_results_ex)
glimpse(all_results_ex)
all_results_ex$thresh_models
p <- plot_diagnostics(all_results_ex$thresh_model)
flatten(all_results_ex$thresh_model)
all_results_ex$thresh_model
names(all_results_ex=
)
names(all_results_ex)
flatten(all_results_ex$thresh_models)
all_results_ex$thresh_models
all_results_ex
all_results_ex$thresh_models
flatten(all_results_ex$thresh_models)
?discard
all_results_ex$thresh_models %>%
flatten() %>%
discard()
all_results_ex$thresh_models %>%
flatten() %>%
discard(~!is.na(.))
all_results_ex$thresh_models %>%
flatten()
?flatten
?test_interaction
?plot_model
all_results_ex$thresh_models %>%
flatten() %>%
compact()
x = list(a=list(NA), b=list(c(1:4)), c=list(NA), d=list(c(1:4)) )
x
x = list(list(NA), list(c(1:4)), list(NA), list(c(1:4)) )
x
list(NA, list(c(1:4)), NA, list(c(1:4)) )
all_results_ex$thresh_models %>%
flatten()
all_results_ex$thresh_models %>%
flatten() %>% str()
all_results_ex$thresh_models %>%
flatten() %>% str(max.level=2)
all_results_ex$thresh_models %>%
flatten() %>% str(max.level=1)
all_results_ex$thresh_models %>%
flatten() %>%
compact()
x = list(NA, list(c(1:4)), NA, list(c(1:4)) )
x
str(x)
all_results_ex$thresh_models %>%
flatten() %>% str(max.level=1)
str(x)
map(x, is.na)
all_results_ex$thresh_models %>%
flatten() %>% #str(max.level=1)
discard(~!is.na(.))
all_results_ex$thresh_models %>%
flatten() %>% #str(max.level=1)
discard(~!is.na(.))
all_results_ex$thresh_models %>%
flatten() %>% #str(max.level=1)
discard(is.na)
all_results_ex$thresh_models %>%
#flatten() %>% #str(max.level=1)
discard(is.na)
?discard
all_results_ex$thresh_models %>%
flatten() %>% #str(max.level=1)
discard(~(is.na(.x))
)
list(a = "a", b = NULL, c = integer(0), d = NA, e = list()) %>%
compact()
all_results_ex$thresh_models %>%
compact()
all_results_ex$thresh_models %>%
# compact()
# flatten() %>% str(max.level=1)
discard(~!is.na(.))
all_results_ex$thresh_models %>%
# compact()
# flatten() %>% str(max.level=1)
discard()
all_results_ex$thresh_models %>%
# compact()
# flatten() %>% str(max.level=1)
discard(.p = is.na(.x))
all_results_ex$thresh_models %>%
# compact()
# flatten() %>% str(max.level=1)
discard(.p = is.na)
all_results_ex$thresh_models %>% str(max.level=1)
# compact()
# flatten() %>% str(max.level=1)
discard(NA)
all_results_ex$thresh_models %>%
# compact()
# flatten() %>% str(max.level=1)
discard(NA)
rep(10, 10) %>%
map(sample, 5)
for(i in 1:4) is.na(x[[i]])
i=1
x
is.na(x[[i]])
for(i in 1:4) print(is.na(x[[i]]))
all_results_ex$thresh_models %>%
compact() %>%
discard(~ is.na(x) )
x = list(NA, 1:4, all_results_ex$thresh_models[[1]], NA)
x
all_results_ex$thresh_models[[1]]
all_results_ex$thresh_models[
all_results_ex$thresh_models
x = list(NA, 1:4, all_results_ex$thresh_models[[69]], NA)
x
x %>% compact()
x %>% compact()
x = list(NA, 1:4, all_results_ex$thresh_models[[69]], NA, NULL)
x
x %>% compact()
x %>% compact() %>% keep(is.na)
x <- rerun(5, a = rbernoulli(1), b = sample(10))
x
x = list(NA, 1:4, all_results_ex$thresh_models[[69]], NA, NULL)
x = list(NA, 1:4, all_results_ex$thresh_models[[69]], NA, NA)
x[1:3]
purrr::keep
x %>% keep(is.list(.x))
x %>% keep(~is.list(.x))
x
all_results_ex$thresh_models %>%
keep(~is.list(.x))
all_results_ex$thresh_models %>%
keep(~is.list(.x)) &>&
plot_diagnostics()
p1<- all_results_ex$thresh_models %>%
keep(~is.list(.x))  %>%
plot_diagnostics()
all_results_ex$thresh_models %>%
keep(~is.list(.x))  %>%
flatten()
all_results_ex$thresh_models %>%
flatten()
all_results_ex$thresh_models %>%
flatten() %>%
discard(~is.na(.x))
all_results_ex$thresh_models %>%
flatten() %>%
#discard(~is.na(.x))
keep(~is.list(.x))
p1<- all_results_ex$thresh_models %>%
flatten() %>%
#discard(~is.na(.x))
keep(~is.list(.x))  %>%
plot_diagnostics()
p1
p1$all_plots[[1]]
gridExtra::grid.arrange(grobs = p1$gcv_plot, ncol = 3)
p1$gcv_plot[[1]]
gridExtra::grid.arrange(grobs = p1$gcvv_plot, ncol = 3)
install.packages("networkD3")
# Load package
library(networkD3)
# Create fake data
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData)
data(MisLinks)
data(MisNodes)
MisLinks
MisNodes
?MisNodes
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
?forceNetwork
str(MisNodes)
my_nodes <- data.frame(name = factor(letters[1:5])
my_nodes <- data.frame(name = factor(letters[1:5], group = 1:5, size = 1)
my_nodes <- data.frame(name = factor(letters[1:5], group = 1:5, size = rep(1,5))
)
my_nodes <- data.frame(name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
str(MisLinks)
head(MisLinks
)
my_nodes <- data.frame(id = 1:5, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_nodes <- data.frame(id = 1:5, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(1,1,2,2,2,3,4,4,4,5,5,5),
target = c(2,4,1,4,5,5,1,2,5,2,3,4), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "id",
Group = "group", opacity = 0.8)
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(0,0,1,1,1,2,3,3,3,4,4,4),
target = c(1,3,0,3,4,4,0,1,4,1,2,3), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "id",
Group = "group", opacity = 0.8)
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(1,1,2,2,2,3,4,4,4,5,5,5),
target = c(2,4,1,4,5,5,1,2,5,2,3,4), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(0,0,1,1,1,2,3,3,3,4,4,4),
target = c(1,3,0,3,4,4,0,1,4,1,2,3), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = c(1,1,2,2,3), size = rep(1,5))
my_links <- data.frame(source = c(1,1,2,2,2,3,4,4,4,5,5,5),
target = c(2,4,1,4,5,5,1,2,5,2,3,4), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(0,0,1,1,1,2,3,3,3,4,4,4),
target = c(1,3,0,3,4,4,0,1,4,1,2,3), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
# Library
library(igraph)
# Create data
set.seed(1)
data <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# Default network
par(mar=c(0,0,0,0))
plot(network)
data
network
plot(network,
vertex.label=LETTERS[1:10],                    # Character vector used to label the nodes
vertex.label.color=c("red","blue"),
vertex.label.family="Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                           # Distance between the label and the vertex
vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
)
par(bg="black")
plot(network,
# === vertex
vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
vertex.frame.color = "white",                 # Node border color
vertex.shape="circle",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
vertex.size=14,                               # Size of the node (default is 15)
vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
# === vertex label
vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
vertex.label.color="white",
vertex.label.family="Times",                  # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                          # Distance between the label and the vertex
vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
# === Edge
edge.color="white",                           # Edge color
edge.width=4,                                 # Edge width, defaults to 1
edge.arrow.size=1,                            # Arrow size, defaults to 1
edge.arrow.width=1,                           # Arrow width, defaults to 1
edge.lty="solid",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network,
edge.color=rep(c("red","pink"),5),           # Edge color
edge.width=seq(1,10),                        # Edge width, defaults to 1
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=1,                          # Arrow width, defaults to 1
edge.lty=c("solid")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
#edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
par(bg="white")
plot(network,
edge.color=rep(c("red","pink"),5),           # Edge color
edge.width=seq(1,10),                        # Edge width, defaults to 1
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=1,                          # Arrow width, defaults to 1
edge.lty=c("solid")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
#edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.sphere, main="sphere")
plot(network, layout=layout.circle, main="circle")
plot(network, layout=layout.random, main="random")
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
data
data <- matrix(c(0,1,0,2,0,
1,0,0,2.75,5.5,
0,0,0,0,6,
2,2.75,0,0,1,
0, 5.5,6,1,0), nc=5)
?graph_from_adjacency_matrix
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
plot(network)
plot(network,
vertex.label=LETTERS[1:5],                    # Character vector used to label the nodes
vertex.label.color=c("red","blue"),
vertex.label.family="Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                           # Distance between the label and the vertex
vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
)
# Default network
par(mar=c(0,0,0,0))
plot(network,
vertex.label=LETTERS[1:5],                    # Character vector used to label the nodes
vertex.label.color=c("red","blue"),
vertex.label.family="Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                           # Distance between the label and the vertex
vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
)
data
data <- matrix(c(0,1,0,2,0,
1,0,0,2.75,5.5,
0,0,0,0,6,
2,2.75,0,0,1,
0, 5.5,6,1,0), nc=5, byrow = TRUE)
data
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
plot(network,
vertex.label=LETTERS[1:5],                    # Character vector used to label the nodes
vertex.label.color=c("red","blue"),
vertex.label.family="Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                           # Distance between the label and the vertex
vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F, weighted = TRUE )
plot(network)
plot(network)
plot(network,
vertex.label=LETTERS[1:5],
edge.color=rep(c("red","pink"),5),           # Edge color
edge.width=seq(1,10),                        # Edge width, defaults to 1
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=1,                          # Arrow width, defaults to 1
edge.lty=c("solid")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
#edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
plot(network)
plot(network,
vertex.label=LETTERS[1:5],                    # Character vector used to label the nodes
vertex.label.color=c("red","blue"),
vertex.label.family="Times",                   # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
vertex.label.dist=0,                           # Distance between the label and the vertex
vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
)
plot(network, layout=layout.sphere, main="sphere")
plot(network, layout=layout.random)
plot(network, layout=layout.circle)
plot(network, layout=layout.circle,
vertex.label=LETTERS[1:5])
plot(network, layout=layout.circle,
vertex.label=LETTERS[1:5], vertex.label.family="Arial")
plot(network,
vertex.label=LETTERS[1:5],
edge.color=rep(c("red","pink"),5),           # Edge color
edge.width=seq(1,10),                        # Edge width, defaults to 1
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=1,                          # Arrow width, defaults to 1
edge.lty=c("solid")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
#edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
)
# Create data
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = 1:5, size = rep(1,5))
my_links <- data.frame(source = c(0,0,1,1,1,2,3,3,3,4,4,4),
target = c(1,3,0,3,4,4,0,1,4,1,2,3), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
# Convert to object suitable for networkD3
my_network_d3 <- igraph_to_networkD3(network)
forceNetwork(Links = my_network_d3$links, Nodes = my_network_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
my_network_d3
forceNetwork(Links = my_network_d3$links, Nodes = my_network_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name')
my_nodes <- data.frame(id = 0:4, name = factor(letters[1:5]), group = rep(1,1,2,2,3), size = rep(1,5))
my_links <- data.frame(source = c(0,0,1,1,1,2,3,3,3,4,4,4),
target = c(1,3,0,3,4,4,0,1,4,1,2,3), value = c(1,2,1,2.75,5.5,6,2,2.75,1,5.5,6,1))
forceNetwork(Links = my_links, Nodes = my_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
# Convert to object suitable for networkD3
my_network_d3 <- igraph_to_networkD3(network, group = rep(1,1,2,2,3))
network
?igraph_to_networkD3
# Convert to object suitable for networkD3
membership(network) <- rep(1,1,2,2,3)
membership(network)
make_graph("Zachary")
wc <- cluster_walktrap(network)
members <- membership(wc)
my_network_d3 <- igraph_to_networkD3(network, group = members)
# Create force directed network plot
forceNetwork(Links = my_network_d3$links, Nodes = my_network_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
wc
plot(network)
par(mar=c(0,0,0,0), oma=c(0,0,0,0))
plot(network)
par(mar=c(0,0,0,0), oma=c(0,0,0,0))
plot(network, layout=layout.circle,
vertex.label=LETTERS[1:5], vertex.label.family="Arial")
# Convert to object suitable for networkD3
wc <- cluster_walktrap(network)
members <- membership(wc)
my_network_d3 <- igraph_to_networkD3(network, group = members)
# Create force directed network plot
forceNetwork(Links = my_network_d3$links, Nodes = my_network_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
setwd("~/Documents/1_Arbeit/Github_Sync/saskiaotto/collaborations/WG-36")
